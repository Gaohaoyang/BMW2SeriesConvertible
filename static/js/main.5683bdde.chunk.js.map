{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","filteredInfo","soldOut","drawerVisible","drawerGallery","handleChange","pagination","filters","sorter","console","log","setState","sortedInfo","clearFilters","filterSoldOutCheckBox","e","target","checked","onCloseDrawer","this","me","columns","title","dataIndex","key","a","b","carInfoId","render","link","rel","href","price","toFixed","priceNewCar","img","record","style","cursor","width","src","alt","onClick","gallery","toString","text","value","onFilter","includes","filteredValue","distance","loanMoney","Date","parse","scanDate","parseInt","yearVersion","viewHeat","emissionStandards","engine","cylindersNum","displacement","factoryTime","cardTime","className","onChange","dataSource","carsData","size","bordered","placement","closable","onClose","visible","maskStyle","backdropFilter","destroyOnClose","map","item","index","marginBottom","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5683bdde.chunk.js","sourcesContent":["import React from 'react'\nimport { Table, Button, Checkbox, Drawer } from 'antd'\n\nimport carsData from './cars.json'\nimport './App.css'\n\nclass App extends React.Component {\n  state = {\n    filteredInfo: {\n      soldOut: ['false']\n    },\n    // sortedInfo: null,\n    drawerVisible: false,\n    drawerGallery: [],\n  }\n\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter)\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    })\n  }\n\n  clearFilters = () => {\n    this.setState({ filteredInfo: null })\n  }\n\n  // clearAll = () => {\n  //   this.setState({\n  //     filteredInfo: null,\n  //     sortedInfo: null,\n  //   })\n  // }\n\n  // setPriceSort = () => {\n  //   this.setState({\n  //     sortedInfo: {\n  //       order: 'descend',\n  //       columnKey: 'price',\n  //     },\n  //   })\n  // }\n\n  /**\n   * 过滤是否已售出\n   */\n  filterSoldOutCheckBox = (e) => {\n    console.log(`checked = ${e.target.checked}`)\n    if (e.target.checked) {\n      this.setState({\n        filteredInfo: {\n          soldOut: ['false'],\n        },\n      })\n    } else {\n      this.setState({\n        filteredInfo: {\n          soldOut: ['true'],\n        },\n      })\n    }\n  }\n\n  onCloseDrawer = () => {\n    this.setState({\n      drawerVisible: false\n    })\n  }\n\n  render() {\n    let { filteredInfo, drawerVisible, drawerGallery } = this.state\n    const me = this\n    // sortedInfo = sortedInfo || {}\n    filteredInfo = filteredInfo || {}\n    const columns = [\n      {\n        title: 'id',\n        dataIndex: 'carInfoId',\n        key: 'carInfoId',\n        sorter: (a, b) => a.carInfoId - b.carInfoId,\n      },\n      {\n        title: '标题',\n        dataIndex: 'title',\n        key: 'title',\n      },\n      // {\n      //   title: 'carOfficial',\n      //   dataIndex: 'carOfficial',\n      //   key: 'carOfficial',\n      //   render(carOfficial) {\n      //     return <span>{carOfficial.toString()}</span>\n      //   }\n      // },\n      {\n        title: 'link',\n        dataIndex: 'link',\n        key: 'link',\n        render(link) {\n          return (\n            <a target='_blank' rel='noopener noreferrer' href={link}>\n              link\n            </a>\n          )\n        },\n      },\n      {\n        title: '价格',\n        dataIndex: 'price',\n        key: 'price',\n        sorter: (a, b) => a.price - b.price,\n        render(price) {\n          return <span>{+(price / 10000).toFixed(2)}w</span>\n        },\n      },\n      {\n        title: '新车价格',\n        dataIndex: 'priceNewCar',\n        key: 'priceNewCar',\n        sorter: (a, b) => a.priceNewCar - b.priceNewCar,\n        render(priceNewCar) {\n          return <span>{+(priceNewCar / 10000).toFixed(2)}w</span>\n        },\n      },\n      {\n        title: '图片',\n        dataIndex: 'img',\n        key: 'img',\n        render(img, record) {\n          return (\n            <img\n              style={{\n                cursor: 'pointer',\n                width: '120px',\n              }}\n              src={img}\n              alt=''\n              onClick={() => {\n                console.log(record.gallery)\n                me.setState({\n                  drawerVisible: true,\n                  drawerGallery: record.gallery\n                })\n              }}\n            />\n          )\n        },\n      },\n      {\n        title: '是否售出',\n        dataIndex: 'soldOut',\n        key: 'soldOut',\n        render(soldOut) {\n          return <span>{soldOut.toString()}</span>\n        },\n        filters: [\n          {\n            text: '已售出',\n            value: 'true',\n          },\n          {\n            text: '未售出',\n            value: 'false',\n          },\n        ],\n        onFilter: (value, record) => record.soldOut.toString().includes(value),\n        filteredValue: filteredInfo.soldOut || null,\n      },\n      // {\n      //   title: 'birth',\n      //   dataIndex: 'birth',\n      //   key: 'birth',\n      // },\n      {\n        title: '里程数',\n        dataIndex: 'distance',\n        key: 'distance',\n        sorter: (a, b) => a.distance - b.distance,\n        render(distance) {\n          return <span>{(distance / 10000).toFixed(2)}万公里</span>\n        },\n      },\n      {\n        title: '月供',\n        dataIndex: 'loanMoney',\n        key: 'loanMoney',\n        sorter: (a, b) => a.loanMoney - b.loanMoney,\n      },\n      {\n        title: 'scanDate',\n        dataIndex: 'scanDate',\n        key: 'scanDate',\n        sorter: (a, b) => {\n          return Date.parse(a.scanDate) - Date.parse(b.scanDate)\n        },\n      },\n      {\n        title: '几几年款',\n        dataIndex: 'yearVersion',\n        key: 'yearVersion',\n        sorter: (a, b) => parseInt(a.yearVersion, 10) - parseInt(b.yearVersion, 10),\n      },\n      {\n        title: '热度',\n        dataIndex: 'viewHeat',\n        key: 'viewHeat',\n        sorter: (a, b) => a.viewHeat - b.viewHeat,\n      },\n\n      {\n        title: '地区',\n        dataIndex: 'location',\n        key: 'location',\n      },\n      {\n        title: '销售厂商',\n        dataIndex: 'agencyBrand',\n        key: 'agencyBrand',\n      },\n      // {\n      //   title: '销售',\n      //   dataIndex: 'agencyName',\n      //   key: 'agencyName',\n      // },\n      // {\n      //   title: 'agencyTelArr',\n      //   dataIndex: 'agencyTelArr',\n      //   key: 'agencyTelArr',\n      // },\n      {\n        title: '排放标准',\n        dataIndex: 'emissionStandards',\n        key: 'emissionStandards',\n        sorter: (a, b) => a.emissionStandards - b.emissionStandards,\n      },\n      {\n        title: 'color',\n        dataIndex: 'color',\n        key: 'color',\n      },\n      {\n        title: 'engine',\n        dataIndex: 'engine',\n        key: 'engine',\n        sorter: (a, b) => a.engine - b.engine,\n      },\n      {\n        title: '气缸数',\n        dataIndex: 'cylindersNum',\n        key: 'cylindersNum',\n        sorter: (a, b) => a.cylindersNum - b.cylindersNum,\n      },\n      {\n        title: '排量',\n        dataIndex: 'displacement',\n        key: 'displacement',\n        render(displacement) {\n          return <span>{(displacement / 1000).toFixed(1)}L</span>\n        },\n      },\n      {\n        title: '出厂时间',\n        dataIndex: 'factoryTime',\n        key: 'factoryTime',\n        sorter: (a, b) => {\n          return Date.parse(a.factoryTime) - Date.parse(b.factoryTime)\n        },\n      },\n      {\n        title: '上牌时间',\n        dataIndex: 'cardTime',\n        key: 'cardTime',\n        sorter: (a, b) => {\n          return Date.parse(a.cardTime) - Date.parse(b.cardTime)\n        },\n      },\n    ]\n\n    return (\n      <div>\n        <div className='table-operations'>\n          <Checkbox\n            onChange={this.filterSoldOutCheckBox}\n            checked={this.state.filteredInfo && this.state.filteredInfo.soldOut && this.state.filteredInfo.soldOut[0] === 'false'}\n          >仅显示在售</Checkbox>\n          {/* <Button onClick={this.setPriceSort}>价格排序</Button> */}\n          <Button onClick={this.clearFilters}>Clear filters</Button>\n          {/* <Button onClick={this.clearAll}>Clear filters and sorters</Button> */}\n        </div>\n        <Table\n          columns={columns}\n          dataSource={carsData}\n          size='small'\n          bordered\n          pagination={false}\n          onChange={this.handleChange}\n        // scroll={{ y: 650 }}\n        />\n        <Drawer\n          title='图集'\n          placement='right'\n          closable={false}\n          onClose={this.onCloseDrawer}\n          visible={drawerVisible}\n          width={848}\n          maskStyle={{\n            backdropFilter: 'blur(5px)'\n          }}\n          destroyOnClose={true}\n        >\n          {\n            drawerGallery.map((item, index) => <img\n              key={`imgGallery_${index}`}\n              src={item}\n              alt=\"gallery\"\n              style={{\n                width: '800px',\n                marginBottom: index === drawerGallery.length - 1 ? '0px' : '24px'\n              }}\n            />)\n          }\n        </Drawer>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}